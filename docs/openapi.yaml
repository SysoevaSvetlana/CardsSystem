openapi: 3.0.3
info:
  title: Bank Cards Management API
  description: |
    REST API для управления банковскими картами с поддержкой:
    - Аутентификации и авторизации (JWT)
    - Управления картами (создание, блокировка, активация)
    - Переводов между картами
    - Управления пользователями
  version: 1.0.0
  contact:
    name: API Support
    email: support@bankcards.example.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: http://localhost:8080
    description: Local Docker environment

tags:
  - name: Аутентификация
    description: Регистрация и вход пользователей
  - name: Карты (USER)
    description: Операции пользователя с картами
  - name: Карты (ADMIN)
    description: Административные операции с картами
  - name: Переводы
    description: Переводы между картами
  - name: Пользователи (ADMIN)
    description: Управление пользователями

security:
  - bearerAuth: []

paths:
  /api/auth/sign-up:
    post:
      tags:
        - Аутентификация
      summary: Регистрация нового пользователя
      description: Создает нового пользователя с ролью USER
      operationId: signUp
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
            example:
              username: "john_doe"
              email: "john@example.com"
              password: "SecurePass123!"
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '400':
          description: Ошибка валидации или пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/sign-in:
    post:
      tags:
        - Аутентификация
      summary: Вход пользователя
      description: Аутентификация пользователя и получение JWT токена
      operationId: signIn
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
            example:
              username: "john_doe"
              password: "SecurePass123!"
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/cards:
    post:
      tags:
        - Карты (ADMIN)
      summary: Создание новой карты
      description: Создает новую карту для указанного пользователя (только ADMIN)
      operationId: createCard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequestDto'
            example:
              userId: 1
      responses:
        '201':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '400':
          description: Ошибка валидации
        '401':
          description: Не авторизован
        '403':
          description: Недостаточно прав (требуется роль ADMIN)
        '404':
          description: Пользователь не найден

    get:
      tags:
        - Карты (ADMIN)
      summary: Получить все карты
      description: Получает список всех карт с пагинацией (только ADMIN)
      operationId: getAllCards
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы (начиная с 0)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Количество элементов на странице
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Список карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponseDto'
        '401':
          description: Не авторизован
        '403':
          description: Недостаточно прав

  /api/cards/my:
    get:
      tags:
        - Карты (USER)
      summary: Получить свои карты
      description: Получает список карт текущего пользователя с пагинацией
      operationId: getMyCards
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список карт пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponseDto'

  /api/cards/{cardId}/activate:
    patch:
      tags:
        - Карты (ADMIN)
      summary: Активировать карту
      description: Активирует заблокированную карту (только ADMIN)
      operationId: activateCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта активирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '404':
          description: Карта не найдена

  /api/cards/{cardId}/confirm-block:
    patch:
      tags:
        - Карты (ADMIN)
      summary: Подтвердить блокировку карты
      description: Подтверждает запрос на блокировку карты (только ADMIN)
      operationId: confirmBlock
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Блокировка подтверждена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'

  /api/cards/{cardId}/reject-block:
    patch:
      tags:
        - Карты (ADMIN)
      summary: Отклонить блокировку карты
      description: Отклоняет запрос на блокировку карты (только ADMIN)
      operationId: rejectBlock
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Блокировка отклонена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'

  /api/cards/{cardId}:
    delete:
      tags:
        - Карты (ADMIN)
      summary: Удалить карту
      description: Удаляет карту из системы (только ADMIN)
      operationId: deleteCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Карта успешно удалена
        '404':
          description: Карта не найдена

  /api/cards/request-block:
    patch:
      tags:
        - Карты (USER)
      summary: Запросить блокировку карты
      description: Пользователь запрашивает блокировку своей карты
      operationId: requestBlock
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBlockRequestDto'
            example:
              cardId: 1
      responses:
        '200':
          description: Запрос на блокировку отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '400':
          description: Ошибка (карта уже заблокирована или не принадлежит пользователю)

  /api/cards/{cardId}/balance:
    get:
      tags:
        - Карты (USER)
      summary: Получить баланс карты
      description: Получает баланс указанной карты пользователя
      operationId: getBalance
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Баланс карты
          content:
            application/json:
              schema:
                type: number
                format: decimal
                example: 1500.50
        '403':
          description: Доступ запрещен (чужая карта)
        '404':
          description: Карта не найдена

  /api/transfers:
    post:
      tags:
        - Переводы
      summary: Перевод между картами
      description: Выполняет перевод средств между картами пользователя
      operationId: transfer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDto'
            example:
              fromCardId: 1
              toCardId: 2
              amount: 100.50
      responses:
        '201':
          description: Перевод выполнен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponseDto'
        '400':
          description: Ошибка валидации или недостаточно средств
        '404':
          description: Карта не найдена

  /api/users:
    get:
      tags:
        - Пользователи (ADMIN)
      summary: Получить всех пользователей
      description: Получает список всех пользователей с пагинацией (только ADMIN)
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserResponseDto'

  /api/users/{id}/role:
    patch:
      tags:
        - Пользователи (ADMIN)
      summary: Назначить роль пользователю
      description: Изменяет роль пользователя (только ADMIN)
      operationId: updateUserRole
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleUpdateDto'
            example:
              role: "ROLE_ADMIN"
      responses:
        '200':
          description: Роль успешно изменена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '404':
          description: Пользователь не найден

  /api/users/{id}:
    delete:
      tags:
        - Пользователи (ADMIN)
      summary: Удалить пользователя
      description: Удаляет пользователя из системы (только ADMIN)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Пользователь успешно удален
        '404':
          description: Пользователь не найден

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен для аутентификации. Получите токен через /auth/sign-in или /auth/sign-up

  schemas:
    SignUpRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          description: Имя пользователя
          example: "john_doe"
        email:
          type: string
          format: email
          description: Email пользователя
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: Пароль пользователя
          example: "SecurePass123!"

    SignInRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Имя пользователя
          example: "john_doe"
        password:
          type: string
          description: Пароль пользователя
          example: "SecurePass123!"

    JwtAuthenticationResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT токен для аутентификации
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    CardCreateRequestDto:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: ID пользователя, для которого создается карта
          example: 1

    CardBlockRequestDto:
      type: object
      required:
        - cardId
      properties:
        cardId:
          type: integer
          format: int64
          description: ID карты для блокировки
          example: 1

    CardResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID карты
          example: 1
        maskedNumber:
          type: string
          description: Маскированный номер карты
          example: "**** **** **** 1234"
        ownerUsername:
          type: string
          description: Имя владельца карты
          example: "john_doe"
        expiryDate:
          type: string
          format: date
          description: Дата истечения срока действия
          example: "2026-12-31"
        status:
          type: string
          enum: [ACTIVE, BLOCKED, BLOCK_REQUESTED, EXPIRED]
          description: Статус карты
          example: "ACTIVE"
        balance:
          type: number
          format: decimal
          description: Баланс карты
          example: 1500.50

    TransferRequestDto:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          format: int64
          description: ID карты отправителя
          example: 1
        toCardId:
          type: integer
          format: int64
          description: ID карты получателя
          example: 2
        amount:
          type: number
          format: decimal
          minimum: 0.01
          description: Сумма перевода
          example: 100.50

    TransferResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID перевода
          example: 1
        fromCardMaskedNumber:
          type: string
          description: Маскированный номер карты отправителя
          example: "**** **** **** 1234"
        toCardMaskedNumber:
          type: string
          description: Маскированный номер карты получателя
          example: "**** **** **** 5678"
        amount:
          type: number
          format: decimal
          description: Сумма перевода
          example: 100.50
        status:
          type: string
          description: Статус перевода
          example: "SUCCESS"
        createdAt:
          type: string
          format: date-time
          description: Дата и время перевода
          example: "2025-10-25T14:30:00"

    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID пользователя
          example: 1
        username:
          type: string
          description: Имя пользователя
          example: "john_doe"
        email:
          type: string
          format: email
          description: Email пользователя
          example: "john@example.com"
        role:
          type: string
          enum: [ROLE_USER, ROLE_ADMIN]
          description: Роль пользователя
          example: "ROLE_USER"

    UserRoleUpdateDto:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          enum: [ROLE_USER, ROLE_ADMIN]
          description: Новая роль пользователя
          example: "ROLE_ADMIN"

    PageCardResponseDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponseDto'
        pageable:
          $ref: '#/components/schemas/Pageable'
        totalPages:
          type: integer
          example: 5
        totalElements:
          type: integer
          example: 42
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        numberOfElements:
          type: integer
          example: 10
        empty:
          type: boolean
          example: false

    PageUserResponseDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDto'
        pageable:
          $ref: '#/components/schemas/Pageable'
        totalPages:
          type: integer
        totalElements:
          type: integer
        last:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean

    Pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
        pageNumber:
          type: integer
        pageSize:
          type: integer
        paged:
          type: boolean
        unpaged:
          type: boolean

    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об ошибке
          example: "Карта с ID 1 не найдена"
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки
          example: "2025-10-25T14:30:00"
